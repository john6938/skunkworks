library(XML)
library(stringr)
library(dplyr)

createRawMasterDf <- function(xml_path, xml_files){

  gbdf <- data.frame()

  for(i in 1:length(xml_files)){
    #for(i in 1:3){
    indata <- xmlParse(file.path(getwd(), xml_path, xml_files[i]))
    #indata = xmlParse(paste0(getwd(),"/data/AllText/","Tr_on_EvolutionaryComp_27.xml",""))

    xml_data_header <- xmlToList(indata)[["header"]]
    xml_data_body <- xmlToList(indata)[["body"]]

    txtfile <- xml_data_header$textfile

    # Segments
    len_seg <- length(xml_data_body)

    seg <- character(len_seg)
    feat <- character(len_seg)

    #j =5
    for(j in 1:len_seg){
      # print("####################")
      # print(i)
      # print(j)
      # print("####################")

      # Breaking out if the element has no segment
      if(is.null(xml_data_body[j][["segment"]])){
        seg <- NA
        feat <- NA
        break()
      }

      if(!("text" %in% names(xml_data_body[j][["segment"]]))){
        seg[j] <- NA
      }
      else{
        seg[j] <- xml_data_body[j][["segment"]][["text"]]
      }

      if(
        !(".attrs" %in% names(xml_data_body[j][["segment"]])) ||
           !("features" %in% names(xml_data_body[j][["segment"]][[".attrs"]]))
      ){
        feat[j] <- NA
      }
      else{
        feat[j] <- xml_data_body[j][["segment"]][[".attrs"]]["features"]
      }

    }

    tdf <- NULL
    tdf <- data.frame(TextFile = rep(txtfile, len_seg),
                      Segment = seg,
                      Features = feat,
                      stringsAsFactors = FALSE)



    gbdf <- rbind(gbdf, tdf)
  }
  return(gbdf)
}

createMasterDf <- function(rmdf){
  rmdf$TextFile <- as.character(lapply(rmdf$TextFile, function(x){
    pos <- str_locate(x, fixed("/"))[1]

    str <- substr(x, pos+1, nchar(x))
    str <- gsub("Tr_on_", "", str)

  }))

  # Removing "rhetorical_moves" from features column
  rmdf$Features <- as.character(lapply(rmdf$Features, function(x){
    str <- gsub("rhetorical_moves", "", x)
    str <- trimws(gsub(";", " ", str))
  }))

  # Adding Moves and Submoves columns
  master <- rmdf
  #master = data.frame(rmdf[,],Moves = rep("NULL",nrow(rmdf)),Submoves = rep("NULL",nrow(rmdf)))

  for(i in 1:nrow(master)){

    # Filenames
    if(length(grep("EvolutionaryComp",master[i,1]))>0){
      master[i,1] <- gsub("EvolutionaryComp", "EC", master[i, 1])
    }

    if(length(grep("WirelessComm",master[i,1]))>0){
      master[i,1] <- gsub("WirelessComm", "WC", master[i, 1])
    }

    if(length(grep("Know&DataEng",master[i,1]))>0){
      master[i,1] <- gsub("Know&DataEng", "KDE", master[i, 1])
    }

    if(length(grep("In_Th",master[i,1]))>0){
      master[i,1] <- gsub("In_Th", "IT", master[i, 1])
    }

    if(length(grep("ImageProcess",master[i,1]))>0){
      master[i,1] <- gsub("ImageProcess", "IP", master[i, 1])
    }

    if(length(grep("Bot",master[i,1]))>0){
      master[i,1] <- gsub("Bot", "BOT", master[i, 1])
    }

    if(length(grep("IE",master[i,1]))>0){
      master[i,1] <- gsub("IE", "IND", master[i, 1])
    }

    if(length(grep("Ling",master[i,1]))>0){
      master[i,1] <- gsub("Ling", "LING", master[i, 1])
    }

    if(length(grep("Mat",master[i,1]))>0){
      master[i,1] <- gsub("Mat", "MAT", master[i, 1])
    }

    if(length(grep("Med",master[i,1]))>0){
      master[i,1] <- gsub("Med", "MED", master[i, 1])
    }

  }
  return(master)

}

createFeatureMove <- function(ftr){
  feature_move <- data.frame(ftr[,], Moves = rep(NA, nrow(ftr)))
  i <- 0
  for(i in 1:nrow(feature_move)){
    if(length(grep("background",feature_move[i,"Features"]))>0 | length(grep("introduction",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "introduction"
    }

    if(length(grep("problem",feature_move[i,"Features"]))>0 | length(grep("introduction",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "introduction"
    }

    if(length(grep("gap",feature_move[i,"Features"]))>0 | length(grep("introduction",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "introduction"
    }

    if(length(grep("overview",feature_move[i,"Features"]))>0 | length(grep("introduction",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "introduction"
    }

    if(length(grep("purpose",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "purpose"
    }

    if(length(grep("method",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "method"
    }

    if(length(grep("result",feature_move[i,"Features"]))>0 | length(grep("methodasproduct",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "result"
    }

    if(length(grep("result",feature_move[i,"Features"]))>0 | length(grep("resultasproduct",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "result"
    }

    if(length(grep("discussion",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "discussion"
    }

    if(length(grep("uncertain",feature_move[i,"Features"]))>0){
      feature_move[i,"Moves"] <- "uncertain"
    }
  }

  feature_move <- feature_move[, -2]

}

createFeatureSubmove <- function(ftr){
  # SUb move
  feature_submove <- data.frame(ftr[,], Submoves = rep(NA, nrow(ftr)))
  i <- 0
  for(i in 1:nrow(feature_submove)){
    if(length(grep("background",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- "background"
    }

    if(length(grep("problem",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- "problem"
    }

    if(length(grep("gap",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- "gap"
    }

    if(length(grep("overview",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- "overview"
    }

    if(length(grep("purpose",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- ""
    }

    if(length(grep("method",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- ""
    }

    if(length(grep("methodasproduct",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- "methodasproduct"
    }

    if(length(grep("resultasproduct",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- "resultasproduct"
    }

    if(length(grep("discussion",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- ""
    }

    if(length(grep("uncertain",feature_submove[i,"Features"]))>0){
      feature_submove[i,"Submoves"] <- ""
    }
  }

  feature_submove <- feature_submove[, -2]
}

createDisciplineSpecificDfs <- function(disciplines_list, master_df){
  discipline_specific_dfs <- list()
  for(discipline_name in disciplines_list) {
    single_discipline_df <- masterDf[grep(discipline_name, master_df$TextFile), c("Segment", "Features")]
    discipline_specific_dfs[[paste(discipline_name, "Discipline", sep = "_")]] <- single_discipline_df
  }
  return(discipline_specific_dfs)
}

createFeatureCounts <- function(discipline_dfs){
  feature_counts <- list()
  for (discipline_name in names(discipline_dfs)) {
    feature_counts[[discipline_name]] <- count(discipline_dfs[[discipline_name]], Features)
  }
  return(feature_counts)
}

createRawFeatPerm <- function(master_df){
  raw_feature_permutation_ds <- summarize(
    group_by(master_df[,c("TextFile", "Features")], TextFile),
    FeatureSequences = paste(Features, collapse = "; ")
  )
  return(raw_feature_permutation_ds)
}

createAbbrPerm <- function(mstPer){
  abbr <- mstPer[,]

  abbr$Moves <- as.character(lapply(abbr$Moves, function(x){
    x <- toupper(substr(x, 1, 1))
  }))

  abbr$Submoves <- as.character(lapply(abbr$Submoves, function(x){
    x <- tolower(substr(x, 1, 1))
  }))

  abbr$Permutation <- do.call(paste, c(abbr[c("Moves", "Submoves")], sep = ""))

  abbr <- abbr[, -c(2, 3)]
}

createMergePerm <- function(abbr){
  curr_file <- ""
  prev_file <- ""
  curr_perm <- ""
  prev_perm <- ""

  i <- 0
  for(i in 1:nrow(abbr)){
    curr_file <- abbr[i, "TextFile"]
    curr_perm <- abbr[i, "Permutation"]

    if(i == 1){
      MergedPermutation <- data.frame(TextFile = curr_file, Permutation = curr_perm, stringsAsFactors = FALSE)
      prev_file <- curr_file
      prev_perm <- curr_perm
    }
    else{

      if(curr_file == prev_file & curr_perm == prev_perm){
        next()
      }
      else{
        MergedPermutation[i,"TextFile"] <- curr_file
        MergedPermutation[i,"Permutation"] <- curr_perm

        prev_file <- curr_file
        prev_perm <- curr_perm
      }

    }

  }
  MergedPermutation <- MergedPermutation[-which(is.na(MergedPermutation$Permutation)),]
  return(MergedPermutation)
}

createFiveMovePermutation <- function(AbreDf){
  FM_df <- AbreDf[,]

  FM_df$Permutation <- as.character(lapply(AbreDf$Permutation, function(x){
    x <- substr(x, 1, 1)
  }))

  return(FM_df)
}

createFourMovePermutation <- function(FiveMoveDf,MergeDf){
  FiveMoveDf$Permutation <- as.character(lapply(FiveMoveDf$Permutation, function(x){
    if(substr(x,1,1) == "P"){
      x <- gsub(substr(x, 1, 1), "I", x)
    }
    else{
      x <- substr(x, 1, 1)
    }
  }))

  return(rbind(FiveMoveDf,MergeDf))
}

getcounts_Abbr_Move <- function(AbbrDf,FiveDf){
  count_abbr <- count(AbbrDf, "Permutation")
  count_five <- count(FiveDf, "Permutation")

  return(list(count_abbr,count_five))
}

getLinearityCount <- function(mrg){
  mrg$Permutation <- as.character(lapply(mrg$Permutation, function(x){
    x <- substr(x, 1, 1)
  }))
  cf <- ""
  pf <- ""
  cp <- ""
  pp <- ""

  i <- 0
  for(i in 1:nrow(mrg)){
    cf <- mrg[i, 1]
    cp <- mrg[i, 2]

    if(cf == pf & cp == pp){
      next()
    }
    else{
      if(i==1){
        tempdf <- data.frame(TextFile = cf, Permutation = cp, stringsAsFactors = FALSE)
        pf <- cf
        pp <- cp
      }
      else{
        tempdf[i,"TextFile"] <- cf
        tempdf[i,"Permutation"] <- cp

        pf <- cf
        pp <- cp
      }
    }
  }
  tempdf <- tempdf[-which(is.na(tempdf)==TRUE),]

  files <- unique(tempdf$TextFile)
  g <- data.frame()
  for(l in files){
    df <- tempdf[which(tempdf$TextFile == l),]
    f <- l
    p <- paste(unlist(df$Permutation), collapse = " ")
    d <- NULL
    d <- data.frame(TextFile = f, Permutation = p, stringsAsFactors = FALSE)
    g <- rbind(g, d)

  }

  return(g)
}

checkCyclicity <- function(ln_cnt){
  
  for(i in 1:nrow(ln_cnt)){
    
    fl <- ln_cnt[i, 1]
    perm <- ln_cnt[i, 2]
    perm.vector <- as.vector(unlist(str_split(ln_cnt[i, "Permutation"], pattern = " ")))
    
    
    if(length(perm.vector)-4 < 0){
      next()
    }
    
    for(j in 1:length(perm.vector)){
      
      if(j +3>length(perm.vector)){
        break()
      }
      else{
        if(perm.vector[j]== perm.vector[j+2]){
          if(perm.vector[j+1]==perm.vector[j+3]){
            ln_cnt[i,"Cyclicity"] <- 1
            break()
          }
        }
      }
    }
  }
  ln_cnt[which(is.na(ln_cnt$Cyclicity)==TRUE),"Cyclicity"] <- 0
  return(ln_cnt)
}

createUpdatePairFreq <- function(perm_list, pair_freq) {
  for(i in 1:(length(perm_list)-1)){
    pair <- paste0(perm_list[i], perm_list[i + 1])
    if (is.null(pair_freq[[pair]])) {
      pair_freq[pair] <- 1
    }
    else {
      pair_freq[[pair]] <- pair_freq[[pair]] + 1
    }
  }
  return(pair_freq)
}
createMovePermLists <- function(perm_df) {
  move_perm_lists <-summarize(
    group_by(perm_df[,c("TextFile", "Permutation")], TextFile), FeatureSequence = list(Permutation)
  )
  return(move_perm_lists)
}
createDisciplinePairFreqsList <- function (move_perm_lists_df, disciplines_list) {
  discipline_pair_freqs <- list()
  for(discipline_name in disciplines_list) {
    single_discipline_df <- move_perm_lists_df[grep(discipline_name, move_perm_lists_df$TextFile), "FeatureSequence"]
    PairFreq <- list()
    for (abstract in single_discipline_df$FeatureSequence) {
      PairFreq <- createUpdatePairFreq(abstract, PairFreq)
    }
    discipline_pair_freqs[[discipline_name]] <- PairFreq
  }
  return(discipline_pair_freqs)
}
createDisciplinePairFreqsMat <- function (freqs_list, disciplines_list) {
  disciplines_list <- sort(disciplines_list)
  adjacent_pairs <- c(
    "IP", "IM", "IR", "ID", "PI", "PM", "PR", "PD", "MI", "MP",
    "MR", "MD", "RI", "RP", "RM", "RD", "DI", "DP", "DM", "DR"
  )
  freq_mat <- matrix(
    nrow = length(adjacent_pairs), ncol = length(disciplines_list), data = 0,
    dimnames = list(adjacent_pairs, disciplines_list)
  )
  for (discipline_name in disciplines_list) {
    for (pair in adjacent_pairs) {
      if (!is.null(freqs_list[[discipline_name]][[pair]])) {
        freq_mat[pair, discipline_name] <- freqs_list[[discipline_name]][[pair]]
      }
    }
  }
  return(freq_mat)
}

createMoveTransMats <- function (freq_mat, disciplines_list) {
  disciplines_list <- sort(disciplines_list)
  discipline_trans_mats <- list()
  for (discipline_name in disciplines_list) {
    disc_counts <- freq_mat[, discipline_name]
    moves_list <- c("I", "P", "M", "R", "D")
    trans_mat <- matrix(
      nrow = length(moves_list), ncol = length(moves_list), data = 0,
      dimnames = list(moves_list, moves_list)
    )
    for (move_pair in names(disc_counts)) {
      move_pair_list <- unlist(strsplit(move_pair, ""))
      trans_mat[move_pair_list[1], move_pair_list[2]] <- disc_counts[move_pair]
    }
    discipline_trans_mats[[discipline_name]] <- trans_mat
  }
  return(discipline_trans_mats)
}
